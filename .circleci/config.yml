version: 2
jobs:
    build:
        docker:
            - image: cimg/python:3.9
        steps:
            - checkout
            - restore_cache:
                  key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
            - run:
                  command: |
                      python3 -m venv .venv
                      . .venv/bin/activate
                      pip install -r requirements.txt
            - save_cache:
                  key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
                  paths:
                      - ".venv"
            - run:
                  name: Running tests
                  command: |
                      . .venv/bin/activate
                      pytest
            - store_artifacts:
                  path: test-reports/
                  destination: python_app

#   build:
#     working_directory: /app
#     docker:
#       - image: docker:17.05.0-ce-git
#     steps:
#       - checkout
#       - setup_remote_docker
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --no-cache \
#               py-pip=9.0.0-r1
#             pip install \
#               docker-compose==1.12.0 \
#               awscli==1.11.76
#       - restore_cache:
#           keys:
#             - v1-{{ .Branch }}
#           paths:
#             - /caches/app.tar
#       - run:
#           name: Load Docker image layer cache
#           command: |
#             set +o pipefail
#             docker load -i /caches/app.tar | true
#       - run:
#           name: Build application Docker image
#           command: |
#             docker build --cache-from=app -t app .
#       - run:
#           name: Save Docker image layer cache
#           command: |
#             mkdir -p /caches
#             docker save -o /caches/app.tar app
#       - save_cache:
#           key: v1-{{ .Branch }}-{{ epoch }}
#           paths:
#             - /caches/app.tar
#       - run:
#           name: Run tests
#           command: |
#             docker-compose -f ./docker-compose.test.yml up
#       - deploy:
#           name: Push application Docker image
#           command: |
#             if [ "${CIRCLE_BRANCH}" == "master" ]; then
#               login="$(aws ecr get-login)"
#               ${login}
#               docker tag app "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
#               docker push "${ECR_ENDPOINT}/app:${CIRCLE_SHA1}"
#             fi
